import { Strategy as GoogleStrategy } from "passport-google-oauth20";
import crypto from "crypto";

import {
  PORT,
  BASE_API_URL,
  BASE_SERVER_URL,
  BASE_CLIENT_URL,
  GOOGLE_CALLBACK_URL,
  GOOGLE_CLIENT_ID,
  GOOGLE_CLIENT_SECRET,
} from "../constants";
import User from "../models/User";

export default (passport) => {
  passport.use(
    new GoogleStrategy(
      {
        clientID: GOOGLE_CLIENT_ID,
        clientSecret: GOOGLE_CLIENT_SECRET,
        callbackURL: `${BASE_SERVER_URL}:${PORT}${BASE_API_URL}${GOOGLE_CALLBACK_URL}`,
      },
      async (accessToken, refreshToken, profile, done) => {
        //get the user data from google
        const { name, id, provider, photos, emails } = profile;

        const autoGeneratedUsername = `${name.givenName}${crypto
          .randomBytes(3)
          .toString("hex")}`;

        const newUser = {
          provider,
          googleId: id,
          email: emails[0].value,
          verified: emails[0].verified,
          firstName: name.givenName,
          lastName: name.familyName,
          avatar: photos[0].value,
          username: autoGeneratedUsername.toLowerCase(),
          password: null,
        };

        try {
          //find the user in our database
          let user = await User.findOne({ googleId: profile.id });

          if (user) {
            //If user present in our database.
            done(null, user);
          } else {
            // if user is not preset in our database save user data to database.
            user = await User.create(newUser);
            done(null, user);
          }
        } catch (err) {
          console.error(err);
        }
      }
    )
  );

  // used to serialize the user for the session
  passport.serializeUser((user, done) => {
    done(null, user.id);
  });

  // used to deserialize the user
  passport.deserializeUser((id, done) => {
    User.findById(id, (err, user) => done(err, user));
  });
};
